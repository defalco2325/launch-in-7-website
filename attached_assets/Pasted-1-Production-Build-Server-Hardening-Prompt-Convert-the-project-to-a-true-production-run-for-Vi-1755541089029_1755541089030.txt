1) Production Build & Server Hardening

Prompt:
“Convert the project to a true production run for Vite + React 18 + Express (TypeScript). Build the client to a hashed dist/client, compile the server to dist/server, and start with NODE_ENV=production on port 4000. Serve static files with gzip and brotli, set Cache-Control for immutable hashed assets (1 year) and no-cache for HTML. Ensure the server logs ‘Server listening on http://localhost:4000’ when ready. Do NOT show code—just implement it.”

2) Bundle Analysis & Code Splitting

Prompt:
“Add a bundle analysis to identify top JS contributors (vendor and app). Implement route-based code splitting and lazy-load heavy components (charts, maps, rich text, carousels, analytics). Replace heavy deps with lighter alternatives (e.g., moment → dayjs/luxon; lodash → lodash-es with per-function imports; large icon sets → per-icon). Remove unused packages and dead code. Target a main entry <180KB gzip and cut unused JS by 70%+. Do not show code; make the changes and summarize what was removed.”

3) LCP/FCP Optimization (Hero Focus)

Prompt:
“Optimize the Largest Contentful Paint. Preload the hero image and primary font; convert the hero asset to AVIF/WebP; set explicit image dimensions; avoid lazy-loading the LCP image; and ensure the hero doesn’t include an auto-playing video or blocking carousel. Stagger animations so content paints first, then animate. Reduce render-blocking resources to near zero. Don’t show code—apply changes and report LCP target (<2.5s).”

4) Lower Total Blocking Time

Prompt:
“Reduce Total Blocking Time under 200ms. Split any long tasks >50ms, defer non-critical scripts, move heavy computations to a web worker or requestIdleCallback, and memoize expensive React subtrees. Verify fewer layout thrashes and re-renders. Don’t show code; implement and summarize which tasks were split/deferred.”

5) Images, Fonts, and Loading Strategy

Prompt:
“Optimize all images (AVIF/WebP where supported), add srcset and dimensions, and lazy-load non-critical images. Self-host fonts, subset to used glyphs, and use font-display: swap. Remove any unused font weights. Ensure CSS is minimal and not blocking initial paint. Don’t show code—make the updates and confirm reductions.”

6) Accessibility Fixes

Prompt:
“Raise Accessibility to ≥95. Fix contrast issues per WCAG AA (check buttons, badges, text on gradients), add clear focus indicators, ensure one H1 and logical heading order, provide ARIA labels for landmarks and form inputs, and verify labels/error text are announced. Do not show code—apply fixes and list what changed.”

7) Best Practices & Security

Prompt:
“Raise Best Practices to ≥95. Ensure production mode everywhere, enforce HTTPS, add essential security headers (HSTS, X-Content-Type-Options, X-Frame-Options/SameOrigin, Referrer-Policy, basic CSP), disable dev sourcemaps in prod, and remove console debugging. Implement and summarize.”

8) Re-Run Lighthouse & Gate with Thresholds

Prompt:
“Run Lighthouse (desktop and mobile) three times against / and key routes. Save HTML reports to /lhci_reports. Show category scores and list any failing audits. Set pass thresholds at 90 for Performance, Accessibility, Best Practices, SEO. If anything is below threshold, list the top 5 failing audits with expected fixes. Do not show code—just the results.”

🎯 Success Targets (post-fix)

Performance: ≥90 (FCP <1.8s, LCP <2.5s, TBT <200ms, CLS <0.1)

Accessibility: ≥95 (contrast, headings, focus, labels)

Best Practices: ≥95 (prod, HTTPS, headers)

SEO: ≥95 (canonical, OG/Twitter, robots/sitemap)

If you want, send the new Lighthouse summary and I’ll point to the last few high-impact tweaks to push Performance over 90.